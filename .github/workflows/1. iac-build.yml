name: Infra-Build Workflow

on:
  workflow_dispatch:  # Triggered manually from GitHub UI

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}  # AWS region from secrets
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}  # AWS access key ID from secrets
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  # AWS secret access key from secrets
  PROJECT_NAME: ${{ secrets.PROJECT_NAME }}  # Project name as an environment variable
  EKS_CLUSTER_NAME: ${{ secrets.PROJECT_NAME }}-eks-cluster

jobs:
  infra-build:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials for Terraform
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Ensure Terraform Directory Exists
        run: mkdir -p ./terraform  # Ensure the 'terraform' directory exists

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.0"  # Specify Terraform version to use

      - name: Initialize Terraform
        run: terraform -chdir=./terraform init  # Initialize Terraform working directory and install plugins

      - name: Generate Terraform Plan
        run: |
          echo "Generating Terraform Plan..."
          terraform -chdir=./terraform plan -out=plan.tfplan  # Generate the plan and save it

      - name: Apply Terraform Plan
        run: |
          echo "Applying Terraform plan..."
          terraform -chdir=./terraform apply -auto-approve plan.tfplan  # Apply the existing plan

      - name: Upload Terraform State to Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: terraform-state
          path: ./terraform/terraform.tfstate  # Path to the Terraform state file
